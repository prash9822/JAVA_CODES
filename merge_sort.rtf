{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
import java.util.*;\
public class MergSort \{\
public static void display(int arr[])\
\{\
for(int i=0;i<arr.length;i++)\
\{\
    System.out.print(arr[i]+" ");\
\}\
\}\
public static void merge(int arr[],int f,int mid,int l)\
\{\
int n1=mid-f+1;\
int n2=l-mid;\
int left[]=new int[n1];\
int right[]=new int[n2];\
int i,j,k;\
for(i=0;i<n1;i++)\
\{\
left[i]=arr[f+i];\
\}\
for(j=0;j<n2;j++)\
\{\
right[j]=arr[mid+1+j];\
\}\
i=0;\
j=0;\
k=f;\
while(i<n1 && j<n2)\
\{\
if(left[i]<=right[j])\
\{\
arr[k]=left[i];\
k++;\
i++;\
\}\
else\
\{\
 arr[k]=right[j];\
 k++;\
 j++;\
\}\
\}\
while(i<n1)\
\{\
arr[k]=left[i];\
k++;\
i++;\
\}\
while(j<n2)\
\{\
arr[k]=right[j];\
k++;\
j++;\
\}\
\}\
 public static void mergesort(int arr[],int f,int l)\
 \{\
 if(f>=l)\
 \{\
 return;\
 \}\
 int mid=(f+l)/2;\
 mergesort(arr,f,mid);\
 mergesort(arr,mid+1,l);\
 merge(arr,f,mid,l);\
 \}\
public static void main(String[] args) \{\
// TODO Auto-generated method stub\
Scanner sc=new Scanner(System.in);\
System.out.println("Enter size of array:");\
int n=sc.nextInt();\
System.out.println("Enter element of array:");\
int arr[]=new int[n];\
for(int i=0;i<n;i++)\
\{\
arr[i]=sc.nextInt();\
\}\
System.out.println("Array before sorting:");\
display(arr);\
mergesort(arr,0,n-1);\
System.out.println("Array after sorting:");\
display(arr);\
\}\
\}\
}